name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths: 
      - 'infrastructure/**'
      - 'environments/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  AZURE_SUBSCRIPTION_ID: d4d5edc0-d0d0-491c-8d55-4bf5481b5b49

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set Environment Variables
      run: |
        ENV_NAME="${{ github.event.inputs.environment || 'dev' }}"
        echo "ENVIRONMENT_NAME=$ENV_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=pdf-ai-agent-rg-$ENV_NAME" >> $GITHUB_ENV
        echo "LOCATION=westus2" >> $GITHUB_ENV
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP_NAME }} \
          --location ${{ env.LOCATION }}
    
    - name: Deploy Infrastructure
      run: |
        # Check if USER_OBJECT_ID secret is available, otherwise use the one from parameters file
        if [ -n "${{ secrets.USER_OBJECT_ID }}" ]; then
          USER_OBJ_ID="${{ secrets.USER_OBJECT_ID }}"
        else
          USER_OBJ_ID="402ed151-67f7-4f36-bc74-ac2b9c9e1980"  # Fallback from parameters file
        fi
        
        # Deploy using the working function-app-only template since main template has Azure API issues
        echo "Deploying infrastructure incrementally to avoid Azure API consumption errors..."
        az deployment group create \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --template-file infrastructure/bicep/function-app-only.bicep \
          --parameters environmentName="${{ env.ENVIRONMENT_NAME }}" \
          --mode Incremental \
          --name "infrastructure-$(date +%Y%m%d-%H%M%S)"
    
    - name: Get Deployment Outputs
      id: outputs
      run: |
        # Get the latest deployment name
        DEPLOYMENT_NAME=$(az deployment group list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query '[0].name' -o tsv)
        echo "Latest deployment: $DEPLOYMENT_NAME"
        
        # Get individual output values to avoid JSON parsing issues
        FUNCTION_APP_NAME=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name "$DEPLOYMENT_NAME" \
          --query 'properties.outputs.functionAppName.value' -o tsv 2>/dev/null || echo 'func-pdfai-dev-tjqwgu4v')
        
        APP_SERVICE_PLAN_NAME=$(az deployment group show \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name "$DEPLOYMENT_NAME" \
          --query 'properties.outputs.appServicePlanName.value' -o tsv 2>/dev/null || echo 'asp-pdfai-dev-tjqwgu4v')
        
        echo "Function App: $FUNCTION_APP_NAME"
        echo "App Service Plan: $APP_SERVICE_PLAN_NAME"
        
        # Set individual outputs instead of complex JSON
        echo "functionAppName=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "appServicePlanName=$APP_SERVICE_PLAN_NAME" >> $GITHUB_OUTPUT
    
    - name: Update Environment Secrets
      run: |
        # Use known Key Vault name since it follows predictable naming convention
        KEY_VAULT_NAME="kv-pdfai-tjqwgu4v"
        echo "KEY_VAULT_URL=https://$KEY_VAULT_NAME.vault.azure.net/" >> $GITHUB_ENV
        echo "FUNCTION_APP_NAME=${{ steps.outputs.outputs.functionAppName }}" >> $GITHUB_ENV
        echo "APP_SERVICE_PLAN_NAME=${{ steps.outputs.outputs.appServicePlanName }}" >> $GITHUB_ENV