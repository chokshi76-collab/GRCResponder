name: Deploy Function App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: src/mcp-server
  RESOURCE_GROUP: pdf-ai-agent-rg-dev
  AZURE_SUBSCRIPTION_ID: d4d5edc0-d0d0-491c-8d55-4bf5481b5b49
  ENVIRONMENT_NAME: dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Install Az PowerShell Module
      shell: pwsh
      run: |
        # Install Az module if not already present
        if (-not (Get-Module -ListAvailable -Name Az)) {
          Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser
        }
        
        # Import the module
        Import-Module Az

    - name: Login to Azure with Service Principal
      shell: pwsh
      run: |
        $jsonCredentials = '${{ secrets.AZURE_CREDENTIALS }}' | ConvertFrom-Json
        $servicePrincipalId = $jsonCredentials.clientId
        $servicePrincipalKey = $jsonCredentials.clientSecret
        $tenantId = $jsonCredentials.tenantId

        $securePassword = ConvertTo-SecureString $servicePrincipalKey -AsPlainText -Force
        $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $servicePrincipalId, $securePassword

        Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant $tenantId
        Set-AzContext -Subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Function App Name from Infrastructure
      shell: bash
      run: |
        # Get the function app name from Azure resources (it was created by infrastructure pipeline)
        FUNCTION_APP_NAME=$(az functionapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" --output tsv)
        echo "AZURE_FUNCTIONAPP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
        echo "Function App Name: $FUNCTION_APP_NAME"

    - name: npm clean install and build
      run: |
        cd src/mcp-server
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps
        npm run build
        # Clean up large dependencies not needed in production after build
        rm -rf node_modules/puppeteer/.local-chromium
        rm -rf node_modules/@types
        rm -rf node_modules/typescript
        rm -rf node_modules/tsx
        rm -rf node_modules/rimraf
        find node_modules -name "*.md" -delete
        find node_modules -name "*.txt" -delete
        find node_modules -name "LICENSE*" -delete
        # Remove TypeScript source files but keep necessary config
        find src -name "*.ts" -delete 2>/dev/null || true
        rm -f tsconfig.json

    - name: 'Deploy app to Azure Functions'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
      env:
        FUNCTION_APP_NAME: ${{ env.AZURE_FUNCTIONAPP_NAME }}